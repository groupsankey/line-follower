#include <QTRSensors.h>

int P,D,I,error,lastError;
int Rmotorf = 11;
int Rmotorb = 4;
int enRmotor = 3;
int Lmotorb = 8;
int standby=10;
int Lmotorf = 9;
int enLmotor = 5;

int maxspeeda = 255;
int maxspeedb = 255;
int basespeeda = 170;
int basespeedb = 170;

float Kp = 0.3; 
float Ki = 0;
float Kd = 3.5;


#define NUM_SENSORS             8  // number of sensors used
#define NUM_SAMPLES_PER_SENSOR  4  // average 4 analog samples per sensor reading
#define EMITTER_PIN 2

// sensors 0 through 5 are connected to analog inputs 0 through 5, respectively
QTRSensorsAnalog qtra((unsigned char[]) {A0, A1, A2, A3, A4, A5, A6, A7}, 
  NUM_SENSORS, NUM_SAMPLES_PER_SENSOR, EMITTER_PIN);
unsigned int sensorValues[NUM_SENSORS];


void setup()
{
  delay(500);
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);
  digitalWrite(standby, HIGH);// turn on Arduino's LED to indicate we are in calibration mode
  for (int i = 0; i < 400; i++)  // make the calibration take about 10 seconds
  {
    qtra.calibrate();       // reads all sensors 10 times at 2.5 ms per six sensors (i.e. ~25 ms per call)
  }
  digitalWrite(13, LOW);     // turn off Arduino's LED to indicate we are through with calibration

  // print the calibration minimum values measured when emitters were on
  Serial.begin(9600);
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtra.calibratedMinimumOn[i]);
    Serial.print(' ');
  }
  Serial.println();
  
  // print the calibration maximum values measured when emitters were on
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtra.calibratedMaximumOn[i]);
    Serial.print(' ');
  }
  Serial.println();
  Serial.println();
  delay(1000);
}


void loop() {
  sag90();
  sol90();
}


void sol90(){
   unsigned int position = qtra.readLine(sensorValues);
  if(sensorValues[0]<300 && sensorValues[1]<300  && sensorValues[6]>650){
    digitalWrite(Rmotorb,HIGH);    
    digitalWrite(Rmotorf,LOW);
    digitalWrite(Lmotorb,HIGH);
    digitalWrite(Lmotorf,LOW);
    analogWrite (enRmotor, 50);
    analogWrite (enLmotor, 50);
    delay(50);
    unsigned int position = qtra.readLine(sensorValues);

    while(sensorValues[4]>200)
    {
    unsigned int position = qtra.readLine(sensorValues);

    digitalWrite(Rmotorf,LOW);    
    digitalWrite(Rmotorb,HIGH);
    digitalWrite(Lmotorf,HIGH);
    digitalWrite(Lmotorb,LOW);
    analogWrite (enRmotor, 75);
    analogWrite (enLmotor, 70);
    }
    return;
  }
  else{
    pid();
  }
}


void sag90(){
   unsigned int position = qtra.readLine(sensorValues);
   if(sensorValues[0]>600  && sensorValues[6]<300 && sensorValues[7]<300){
    digitalWrite(Rmotorb,HIGH);    
    digitalWrite(Rmotorf,LOW);
    digitalWrite(Lmotorb,HIGH);
    digitalWrite(Lmotorf,LOW);
    analogWrite (enRmotor, 50);
    analogWrite (enLmotor, 50);
    delay(50);
    
    unsigned int position = qtra.readLine(sensorValues);

    while(sensorValues[3]>200)
    {
    unsigned int position = qtra.readLine(sensorValues);
     digitalWrite(Rmotorf,HIGH);    
    digitalWrite(Rmotorb,LOW);
    digitalWrite(Lmotorf,LOW);
    digitalWrite(Lmotorb,HIGH);
    analogWrite (enRmotor, 70);
    analogWrite (enLmotor, 75);

    
    }
   }
   else{
      pid();
   }
}


void pid()  {

  
  unsigned int position = qtra.readLine(sensorValues);
  int error = 3500 - position;
   /*
    for (uint8_t i = 0; i < SensorCount; i++)
  {
    Serial.print(sensorValues[i]);
    Serial.print('\t');
  }
  */
  //uSerial.println(position);
   
  P = error;
  I = error + lastError;
  D = error - lastError;
  lastError = error;
  int motorspeed = P*Kp + D*Kd + I*Ki ;
  
  int motorspeeda = basespeeda + motorspeed;
  int motorspeedb = basespeedb - motorspeed;
  
  if (motorspeeda > maxspeeda) {
    motorspeeda = maxspeeda;
  }
  if (motorspeedb > maxspeedb) {
    motorspeedb = maxspeedb;
  }

  if (motorspeeda < 0) {
  motorspeeda =0;
    
  }
  if (motorspeedb < 0) {
    
    motorspeedb = 0;
    
  } 

   
    digitalWrite(Rmotorf,HIGH);
    digitalWrite(Rmotorb,LOW);
    digitalWrite(Lmotorf,HIGH);
    digitalWrite(Lmotorb,LOW);
    
    analogWrite(enRmotor,motorspeedb);
    analogWrite(enLmotor,motorspeeda);   
    Serial.print(motorspeeda);
    Serial.print("          ");
    Serial.println(motorspeedb);
    
   
    
}